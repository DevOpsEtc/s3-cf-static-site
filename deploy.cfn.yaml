AWSTemplateFormatVersion: '2010-09-09'
Description:  >
  Deploys a ACM SSL/TLS certificate, IAM group, IAM policy, IAM user, three S3
  buckets, two CloudFront distributions and two Route 53 DNS records.
  Certificate needs to be requested in us-east-1 region in order to work
  CloudFront distributions. Also deploys a CodeCommit repository and
  CodePipeline pipeline.

Parameters:
  DomainName:
    Description: 'name of domain pointing to static website, e.g domain.com'
    Type: String
  SiteName:
    Description: 'group with admin level access to S3 and cloudfront'
    Type: String

Resources:
  SiteCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      DomainValidationOptions:
      - DomainName: !Ref DomainName
        ValidationDomain: !Ref DomainName
      - DomainName: !Sub 'www.${DomainName}'
        ValidationDomain: !Ref DomainName

  SiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DomainName
      WebsiteConfiguration:
        IndexDocument: index.html

  SiteBucketLog:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'log.${DomainName}'
    DependsOn:
      - SiteBucket

  SiteBucketRedirect:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'www.${DomainName}'
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: !Ref DomainName
          Protocol: https

  SiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SiteBucket
      PolicyDocument:
        Statement:
          - Sid: ReadAccess
            Action:
              - 's3:GetObject'
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${SiteBucket}/*'
            Principal: '*'

  SiteDistro:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        Comment: !Sub 'CDN for S3-backed website: ${DomainName}'
        Origins:
          - DomainName: !Select [2, !Split ['/', !GetAtt 'SiteBucket.WebsiteURL']]
            Id: S3Origin
            CustomOriginConfig:
              OriginProtocolPolicy: 'http-only'
        DefaultCacheBehavior:
          AllowedMethods: # other methods: DELETE,OPTIONS,PATCH,POST,PUT
            - GET
            - HEAD
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: 'redirect-to-https'
        Enabled: true
        HttpVersion: http2
        Logging:
          IncludeCookies: false
          Bucket: !Sub 'log.${DomainName}.s3.amazonaws.com'
          Prefix: logs/
        PriceClass: 'PriceClass_100'
        ViewerCertificate:
          AcmCertificateArn: !Ref SiteCertificate
          MinimumProtocolVersion: TLSv1
          SslSupportMethod: 'sni-only'
    DependsOn:
      - SiteBucket
      - SiteBucketLog

  SiteDistroRedirect:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub 'www.${DomainName}'
        Comment: !Sub 'Redirect www.${DomainName} => ${DomainName}'
        Origins:
          - DomainName: !Select [2, !Split ['/', !GetAtt 'SiteBucketRedirect.WebsiteURL']]
            Id: S3Origin
            CustomOriginConfig:
              OriginProtocolPolicy: 'http-only'
        DefaultCacheBehavior:
          AllowedMethods: # other methods: DELETE,OPTIONS,PATCH,POST,PUT
            - GET
            - HEAD
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: 'redirect-to-https'
        Enabled: true
        HttpVersion: http2
        PriceClass: 'PriceClass_100'
        ViewerCertificate:
          AcmCertificateArn: !Ref SiteCertificate
          MinimumProtocolVersion: TLSv1
          SslSupportMethod: 'sni-only'
    DependsOn:
      - SiteBucketRedirect
      - SiteCertificate

  Route53Record:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: 'Zone apex alias targeted to CloudFront distribution'
      HostedZoneName: !Sub '${DomainName}.'
      RecordSets:
        - Name: !Ref DomainName
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # required AWS CloudFront zone
            DNSName: !GetAtt SiteDistro.DomainName
        - Name: !Sub 'www.${DomainName}' # redirect
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # required AWS CloudFront zone
            DNSName: !GetAtt SiteDistroRedirect.DomainName

  BlogRepo:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: !Ref DomainName
      RepositoryDescription: !Sub 'Repo for static website: ${DomainName}'

  IAMUserGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Ref SiteName

  IAMUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Sub '${SiteName}-Admin'
      Groups:
        - !Ref IAMUserGroup

  IAMUserGroupPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Ref SiteName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: S3AdminAccess
            Effect: "Allow"
            Action: "*"
            Resource:
              - !Sub 'arn:aws:s3:::${SiteBucket}/*'
              - !Sub 'arn:aws:s3:::${SiteBucket}'
              - !Sub 'arn:aws:s3:::log.${SiteBucket}/*'
              - !Sub 'arn:aws:s3:::log.${SiteBucket}'
          - Sid:  CodeCommitAdminAccess
            Effect: "Allow"
            Action: "*"
            Resource:
              - !Sub 'arn:aws:codecommit:::${DomainName}*'
      Groups:
        - Ref: IAMUserGroup
